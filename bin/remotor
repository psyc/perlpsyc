#!/usr/bin/perl -I/usr/depot/lib/perl5
#
# remote control for Tor: the remoTor!
#	--symlynX 2016
#
# + produce and receive Tor events over the ControlPort
# + forward important messages into a chatroom via PSYC

my $host = '127.0.0.1';	    # defaults to try
my $port = 9051;
my $circ = 1;		    # request real-time circuit activity by default?

sub debug() { 0 }

use IO::Socket::INET;
use Net::PSYC qw( :event );
use Term::ANSIColor qw(:constants);
use Getopt::Std;
getopt('bclpmtHP');

my $bind = $opt_b || "psyc://$ENV{USER}\@127.0.0.1:4051/\$remotor";
my $method = $opt_m || '_notice_tor';
my $ini = $opt_c || "$ENV{HOME}/.tor/remotor.ini";

my $socket = undef;
my $target;
my $log = undef;
my %config;

## SANDWICHES ##

sub say {
	print BOLD, MAGENTA, @_, RESET, "\n";
}

sub torparse {
	$_ = <$socket>;
	chop; chop;
	return unless $_;
	return if $_ eq '510 Unrecognized command ""';
	# we're not vidalia.. let's just show built circuits
	return if /^650 CIRC \d+ (LAUNCHED|EXTENDED)/;
	s/ TIME_CREATED=\S+\b//;    # too much information
	s/ SOCKS_PASSWORD="0"//;    # not interesting
	s/ PURPOSE=GENERAL\b//;	    # only show ungeneral purposes
	s/\bPURPOSE=(\S+)\b/ GREEN. $1 .RESET /e;
	s/\bBUILD_FLAGS=(\S+)\b/ BLUE. $1 .RESET /e;
	s/\bREND_QUERY=(\S+)\b/ CYAN. $1 .RESET /e;
	s/\bHS_STATE=\b//;
	# let it be human readable
	s/IS_INTERNAL\b/i/;
	s/ONEHOP_TUNNEL\b/o/;
	s/NEED_CAPACITY\b/c/;
	s/NEED_UPTIME\b/u/;
	s/\$\w+~(\w+)\b/ RED. $1 .RESET /ge;
	print YELLOW, $_, RESET, "\n";
	sendmsg($target, $method, $_) if $target and
	    /(FAIL|ERROR|DESTROY|SIGNAL|DANGER|LIVENESS|HIBERNATION|TRANSPORT|GUARD|BAD|HIJACKED|USELESS|UNREACHABLE|CLOCK|BUG|TOO_MANY)\b/;
	print $log "> $_\n" if $log;
	print $socket "\n";
}

sub keyparse {
	$_ = <STDIN>;
	exit if /^\s*q\s*$/i;
	return &circtoggle if /^\s*t\s*$/i;
	s/^\s*n\s*$/SIGNAL NEWNYM\n/i;
	s/^\s*c\s*$/GETINFO circuit-status\n/i;
	s/^\s*s\s*$/GETINFO stream-status\n/i;
	if ( /^\s*(\S|help)\s*$/i ) {
		print <<X;
	*** Available shortcuts:
		'q' to quit
		'n' for new identity
		'c' for circuit-status
		's' for stream-status
		't' to toggle circuit events
X
		return;
	}
	print $socket $_;
	print $log "<<< $_" if $log;
}

sub circtoggle {
	my $c = "SETEVENTS STATUS_CLIENT STATUS_GENERAL STATUS_SERVER";
	$c .= " CIRC" if $circ;	    # CIRC is pretty verbose
	print $socket $c, "\n";
	$circ = 1 - $circ;
}

sub msg {
	my ($source, $mc, $data, $vars) = @_;
	print MAGENTA, psyctext($data, $vars), RESET, "\n";
}

# simple .ini file format parser taken from psyconf
sub iniparse {
	my $cf = shift;
	my $f = "default";
	open C, $cf;
	while(<C>) {
		next if /^;/;
		next if /^\s*$/;
		$f = $1, next if /^\[(\w+)\]\s*$/;
		$config{"$f:$1"} = $2, next
		    if /^(\w+)\s*=\s*(.+?)\s*$/;
		die "cannot parse line $. in $cf\n\t$_\n";
	}
	close C;
	say join ' ', keys %config if debug;
}

## MAIN ###

	$|=1;
	&iniparse($ini);
	my $nick = shift || 'default';
	$host = $1 if $ENV{http_proxy} =~ m!^http://(\S+):\d+$!;
	$host = $1 if $ENV{HTTP_PROXY} =~ m!^http://(\S+):\d+$!;
	$host = $1 if $ENV{SOCKS_PROXY} =~ m!^socks://(\S+):\d+$!;
	$host = $config{"$nick:host"} if $config{"$nick:host"};
	$port = $config{"$nick:port"} if $config{"$nick:port"};
	my $auth = $config{"$nick:auth"};
	$auth = $opt_p if $opt_p;
	$host = $opt_H if $opt_H;
	$port = $opt_P if $opt_P;
	$target = $opt_t || $config{"$nick:notify"}
			 || $config{"default:notify"};

	die <<X unless $auth;
Is $host:$port the host and port your Tor router answers on?

Usage: $0 [<options>] [<nickname>]

Options:
	-p <password>	Authentication string needed to take control
	-H <host>	Tor router host
	-P <port>	Tor router control port
	-l <logfile>	Keep a transaction log
	-c <config>	Alternate configuration file to use
	-t <uniform>	PSYC address to send notifications to
	-b <uniform>	PSYC address to bind to
	-m <method>	PSYC method to use

<nickname> matches an entry from the $ini file.
Here's an example for the ini syntax in use:

[default]
host=192.168.0.1
port=9051
auth=somesecretrandomstring
notify=psyc://127.0.0.1/\@remotor

The configuration file is a safer place to store authentication
strings than the command line which can be read by other users
of this computing device (in case you have any). The default
entry will be used unless you specify a nickname.
X
	say "Trying to connect Tor router at $host:$port";
	$socket = IO::Socket::INET->new( Proto => 'tcp',
				PeerAddr => $host, PeerPort => $port);
	die "Could not connect to $host:$port: $!" unless $socket;
	say "Connected to ControlPort at $host:$port";

	bind_uniform( $bind );
	register_uniform();
	say "Listening for PSYC controls on $bind";
	print GREEN, "Taking Tor commands from STDIN. Type '?' for a list of shortcuts.\n", RESET;
	print GREEN, "See also https://gitweb.torproject.org/torspec.git/plain/control-spec.txt\n", RESET;

	print $socket <<X;
AUTHENTICATE "$auth"
USEFEATURE EXTENDED_EVENTS VERBOSE_NAMES
X
	&circtoggle;
	die "Cannot write to $opt_l: $!"
	    if $opt_l and not open($log, '>>', $opt_l);
	print $log "\n\n\n\n\n*** New session ***\n\n" if $log;

	add($socket, 'r', \&torparse);
	add(\*STDIN, 'r', \&keyparse);
	sendmsg($target, $method."_start", "$0 started") if $target;
	start_loop();
	sendmsg($target, $method."_stop", "$0 stopped") if $target;
	exit;

