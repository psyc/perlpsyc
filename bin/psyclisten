#!/usr/bin/perl -I/usr/depot/lib/perl5
#
# listen for PSYC packets and dump them

use Term::ANSIColor qw( :constants );   # optional but pervasive
use Net::PSYC qw( :event );

use Getopt::Std;
getopt('b');
my $uni = $opt_b || 'psyc://localhost:4404';

sub type {
    my $bla = <STDIN>;
    print <<X;
you typed: $bla
bye.
X
    exit;
}

sub msg {
    my ($source, $mc, $data, $vars) = @_;

    if ($opt_v and $vars) {
	    print <<X;

*** method $mc; variables:
X
	    foreach $i (keys %$vars) {
		    print "\t$i $vars->{$i}\n";
	    }
    }
    if ($data) {
	    if (length($data) < 200) {
		    print <<X, return if $opt_v;
==============================================================================
$data
==============================================================================
X
		    if ($mc =~ /^_(message|converse)/) {
			    if (exists $vars->{_nick}) {
				    $_ = GREEN. "<". $vars->{_nick} ."> ". YELLOW. $data;
			    } else {
				    $_ = BLUE. "(". $source .") ". YELLOW. $data;
			    }
		    } else {
			    $_ = MAGENTA. psyctext($data, $vars);
		    }
		    print RED, '{', $mc, '} ', $_, RESET, "\n";
	    } elsif (open(O, ">dump$$")) {
		    print O $data;
		    close O;
		    print "\n", length($data), <<X;
*** bytes of data stored in a file called 'dump$$'
X
	    } else {
		    print STDERR <<X;
*** could not save data in a file called 'dump$$': $!
X
	    }
    }
    print "\nlistening... " if $opt_v;
}

bind_uniform( $uni );
register_uniform();

# shows how to do add own fds into the select-wrapper
add(\*STDIN, 'r', \&type);

$|=1;
print <<X;
Try also option -v for verbose output.
X
print GREEN, "Listening on $uni ...\n", RESET;
start_loop();

